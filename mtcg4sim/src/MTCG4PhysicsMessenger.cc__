//
// MTCG4PhysicsMessenger.cc by Mich 111221
//
#include "MTCG4PhysicsMessenger.hh"
#include "MTCG4PhysicsList.hh"

#include "G4UIdirectory.hh"
#include "G4UIcmdWithABool.hh"
#include "G4UIcmdWithAnInteger.hh"

MTCG4PhysicsMessenger::MTCG4PhysicsMessenger(MTCG4PhysicsList* Phys)
:fPhysicsList(Phys)
{
	fPhysicsDirectory = new G4UIdirectory("/mtcg4/physics/");
	fPhysicsDirectory->SetGuidance("Physics options.");

	fProduceCherenkovCmd = new
		G4UIcmdWithABool("/mtcg4/physics/produceCerenkov", this);
	fProduceCherenkovCmd->SetGuidance("Produce Cerenkov light.");
	fProduceCherenkovCmd->SetGuidance("true: produce, false: do not produce.");
	fProduceCherenkovCmd->SetParameterName("cerenkovIsTurnedOn", false);
	fProduceCherenkovCmd->AvailableForStates(G4State_PreInit, G4State_Idle);

	fProduceScintillationCmd = new
		G4UIcmdWithABool("/mtcg4/physics/produceScintillation", this);
	fProduceScintillationCmd->
		SetGuidance("Produce Scintillation light.");
	fProduceScintillationCmd->SetGuidance("true: produce, false: do not produce.");
	fProduceScintillationCmd->SetParameterName("scintillationIsTurnedOn", false);
	fProduceScintillationCmd->AvailableForStates(G4State_PreInit,
			G4State_Idle);

	fMaxNumPhotonsPerStepCmd = new
		G4UIcmdWithAnInteger("/mtcg4/physics/setMaxNumPhotonsPerStep", this);
	fMaxNumPhotonsPerStepCmd->
		SetGuidance("Set the maximum number of photons produced by the simulation per particle step.");
	fMaxNumPhotonsPerStepCmd->SetParameterName("maxNumPhotonsPerStep", false);
	fMaxNumPhotonsPerStepCmd->
		SetRange("maxNumPhotonsPerStep >= 0 && maxNumPhotonsPerStep <= 1000");
	fMaxNumPhotonsPerStepCmd->AvailableForStates(G4State_PreInit, G4State_Idle);

	fNeutronHPThermalScatteringCmd = new
		G4UIcmdWithABool("/mtcg4/physics/setNeutronHPThermalScattering", this);
	fNeutronHPThermalScatteringCmd->
		SetGuidance("Take into account the chemical bindings of atoms in a molecule for thermal neutron scattering in a solid medium.");
	fNeutronHPThermalScatteringCmd->SetGuidance("true: yes, false: no.");
	fNeutronHPThermalScatteringCmd->SetParameterName("NeutronHPThermalScatteringIsTurnedOn", false);
	fNeutronHPThermalScatteringCmd->AvailableForStates(G4State_PreInit, G4State_Idle);

	fVerbosityCmd = new G4UIcmdWithAnInteger("/mtcg4/physics/setVerbosity", this);
	fVerbosityCmd->SetGuidance("Set verbosity setting for physics list.");
	fVerbosityCmd->AvailableForStates(G4State_PreInit, G4State_Idle);
}

MTCG4PhysicsMessenger::~MTCG4PhysicsMessenger()
{
	delete fProduceCherenkovCmd;
	delete fProduceScintillationCmd;
	delete fMaxNumPhotonsPerStepCmd;
	delete fNeutronHPThermalScatteringCmd;
	delete fVerbosityCmd;
	delete fPhysicsDirectory;
}

void MTCG4PhysicsMessenger::SetNewValue(G4UIcommand* cmd, G4String newValue)
{
	if(cmd == fProduceCherenkovCmd){
		fPhysicsList->SetCerenkovProduction(fProduceCherenkovCmd->GetNewBoolValue(newValue));
	}
	else if(cmd == fProduceScintillationCmd){
		fPhysicsList->SetScintillationProduction(fProduceScintillationCmd->GetNewBoolValue(newValue));
	}
	else if(cmd == fMaxNumPhotonsPerStepCmd){
		fPhysicsList->SetNbOfPhotonsCerenkov(fMaxNumPhotonsPerStepCmd->GetNewIntValue(newValue));
	}
	else if(cmd == fNeutronHPThermalScatteringCmd){
		fPhysicsList->SetNeutronHPThermalScattering(fNeutronHPThermalScatteringCmd->GetNewBoolValue(newValue));
	}
	else if(cmd == fVerbosityCmd){
		fPhysicsList->SetVerbose(fVerbosityCmd->GetNewIntValue(newValue));
	}
}

G4String MTCG4PhysicsMessenger::GetCurrentValue(G4UIcommand* cmd)
{
	G4String answer;
	if(cmd == fProduceCherenkovCmd){
		answer =
			fProduceCherenkovCmd->ConvertToString(fPhysicsList->GetCerenkovProduction());
	}
	else if(cmd == fProduceScintillationCmd){
		answer =
			fProduceScintillationCmd->ConvertToString(fPhysicsList->GetScintillationProduction());
	}
	else if(cmd == fMaxNumPhotonsPerStepCmd){
		answer = "Value is not yet set.";
	}
	else if(cmd == fNeutronHPThermalScatteringCmd){
		answer =
			fNeutronHPThermalScatteringCmd->ConvertToString(fPhysicsList->GetNeutronHPThermalScattering());
	}
	else if(cmd == fVerbosityCmd){
		answer = "Value is not yet set.";
	}
	return answer;
}
